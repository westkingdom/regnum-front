steps:
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['version']


  # 1. Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t',
      '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA',
      '.'
    ]

  # 2. Push the container image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push',
      '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA'
    ]

  # 3. Deploy container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args: [
      'run',
      'deploy',
      '${_SERVICE_NAME}',
      '--image', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA',
      '--region', '${_REGION}',
      '--allow-unauthenticated',
      '--set-secrets=/secrets/sa/service_account.json=regnum-service-account-key:latest,/oauth/google_credentials.json=regnum-google-credentials:latest',
      '--set-env-vars',
      'IMPERSONATED_USER_EMAIL=webminister@westkingdom.org,REDIRECT_URI=https://regnum.westkingdom.org,BASE_URL=https://regnum.westkingdom.org,REGNUM_API_URL=https://api.westkingdom.org',
      '--platform', 'managed',
      '--ingress', 'internal-and-cloud-load-balancing',
      '--port', '8080'
    ]

  # Create the backend service first
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args: [
      'compute',
      'backend-services',
      'create',
      'regnum-front',
      '--region=us-west1',
      '--protocol=HTTPS',
      '--port-name=http',
      '--timeout=60s'
    ]

  # Delete existing SSL certificate
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args: [
      'compute',
      'ssl-certificates',
      'delete',
      'regnum-cert',
      '--global',
      '--quiet'  # Skip confirmation prompt
    ]
    allowFailure: true  # Continue even if certificate doesn't exist

  # Create new SSL certificate
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args: [
      'compute',
      'ssl-certificates',
      'create',
      'regnum-cert',
      '--domains=regnum.westkingdom.org',
      '--global'
    ]

  # Import the URL map configuration
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args: [
      'compute',
      'url-maps',
      'import',
      'regnum-lb',
      '--source=load-balancer.yaml',
      '--global'
    ]

  # Create target HTTPS proxy
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args: [
      'compute',
      'target-https-proxies',
      'create',
      'regnum-https-proxy',
      '--url-map=regnum-lb',
      '--ssl-certificates=regnum-cert'
    ]

  # Create forwarding rule
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args: [
      'compute',
      'forwarding-rules',
      'create',
      'regnum-https-forwarding-rule',
      '--target-https-proxy=regnum-https-proxy',
      '--global',
      '--ports=443'
    ]

# Store the image name in Artifact Registry
images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA'

# Define substitutions (variables)
substitutions:
  _ARTIFACT_REPO_NAME: 'regnum-front' # e.g., regnum-repo
  _SERVICE_NAME: 'regnum-front' # e.g., regnum-front
  _AR_HOSTNAME: 'us-west1-docker.pkg.dev'
  _AR_PROJECT_ID: 'regnum-front' # e
  _AR_REPOSITORY: 'cloud-run-source-deploy'
  _AR_SERVICE: 'regnum-front'
  _PLATFORM: 'managed'
  _REGION: 'us-west1'
 # Use 'managed' for serverless Cloud Run
  _IMAGE_NAME: '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA'
  _TRIGGER_ID: 'd4a0f027-7719-4b48-8861-a20ef2b4c200' # e.g., d4a0f027-7719-4b48-8861-a20ef2b4c200

# Optional: Set timeout for the build
timeout: '1800s' # Set appropriate timeout for infrastructure changes
serviceAccount: 'projects/westkingdom-primary/serviceAccounts/85382560394-compute@developer.gserviceaccount.com'
options: 
  logging: 'CLOUD_LOGGING_ONLY'