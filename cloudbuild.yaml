steps:
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['version']

  # 1. Check if SSL certificate exists
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute ssl-certificates describe regnum-ssl-cert --global &>/dev/null; then
          echo "Creating SSL certificate..."
          gcloud compute ssl-certificates create regnum-ssl-cert \
            --domains=regnum-front-85382560394.us-west1.run.app \
            --global
        else
          echo "SSL certificate already exists"
        fi

  # 2. Check if backend service exists
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute backend-services describe regnum-backend-service --global &>/dev/null; then
          echo "Creating backend service..."
          gcloud compute backend-services create regnum-backend-service \
            --global \
            --protocol=HTTP \
            --port-name=http \
            --health-checks=regnum-health-check
        else
          echo "Backend service already exists"
        fi

  # 3. Check if health check exists
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute health-checks describe regnum-health-check --global &>/dev/null; then
          echo "Creating health check..."
          gcloud compute health-checks create http regnum-health-check \
            --global \
            --port=8080 \
            --request-path=/ \
            --check-interval=5s \
            --timeout=5s \
            --unhealthy-threshold=2 \
            --healthy-threshold=2
        else
          echo "Health check already exists"
        fi

  # 4. Check if URL map exists
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute url-maps describe regnum-url-map --global &>/dev/null; then
          echo "Creating URL map..."
          gcloud compute url-maps create regnum-url-map \
            --default-service=regnum-backend-service
        else
          echo "URL map already exists"
        fi

  # 5. Check if HTTPS proxy exists
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute target-https-proxies describe regnum-https-proxy --global &>/dev/null; then
          echo "Creating HTTPS proxy..."
          gcloud compute target-https-proxies create regnum-https-proxy \
            --url-map=regnum-url-map \
            --ssl-certificates=regnum-ssl-cert
        else
          echo "HTTPS proxy already exists"
        fi

  # 6. Check if forwarding rule exists
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute forwarding-rules describe regnum-forwarding-rule --global &>/dev/null; then
          echo "Creating forwarding rule..."
          gcloud compute forwarding-rules create regnum-forwarding-rule \
            --global \
            --target-https-proxy=regnum-https-proxy \
            --ports=443
        else
          echo "Forwarding rule already exists"
        fi

  # 7. Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA',
        '.',
      ]

  # 8. Push the container image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA',
      ]

  # 9. Deploy container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      [
        'run',
        'deploy',
        '${_SERVICE_NAME}',
        '--image',
        '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA',
        '--region',
        '${_REGION}',
        '--allow-unauthenticated',
        '--set-secrets=/secrets/sa/service_account.json=regnum-service-account-key:latest,/oauth/google_credentials.json=regnum-google-credentials:latest',
        '--set-env-vars=IMPERSONATED_USER_EMAIL=webminister@westkingdom.org',
        '--set-env-vars=REDIRECT_URL=https://regnum.westkingdom.org',
        '--set-env-vars=REGNUM_API_URL=https://api.westkingdom.org',
        '--platform',
        'managed',
      ]

  # 10. Update backend service with new Cloud Run service
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud compute backend-services update regnum-backend-service \
          --global \
          --add-backend="service=${_SERVICE_NAME},region=${_REGION},port=8080"

# Store the image name in Artifact Registry
images:
  - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REPO_NAME}/${_SERVICE_NAME}:$COMMIT_SHA'

# Define substitutions (variables)
substitutions:
  _REGION: 'us-west1'
  _ARTIFACT_REPO_NAME: 'regnum-artifacts'
  _SERVICE_NAME: 'regnum-front'

# Timeout for the entire build
timeout: '1800s'  # 30 minutes

# Add IAM permissions needed for the build
options:
  logging: CLOUD_LOGGING_ONLY